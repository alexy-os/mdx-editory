{
  "1750614570113": {
    "title": "BuildY UI8Kit component library ",
    "content": "<h1>BuildY UI8Kit component library</h1>\n<p>A powerful <strong><a href=\"https://www.npmjs.com/package/buildy-ui\">buildy-ui</a> CLI</strong> for adding UI components to your Vite React projects with <a href=\"https://www.npmjs.com/package/ui8kit\">multi-registry</a> support and intelligent dependency validation.</p>\n<h2>Quick Start</h2>\n<p>No installation needed! Use directly with <code>npx</code> or <code>bun x</code>:</p>\n<pre><code class=\"language-bash\"># Initialize utility registry (base requirement)\nnpx buildy-ui@latest init\n\n# Initialize additional registries\nnpx buildy-ui@latest init --registry semantic\nnpx buildy-ui@latest init --registry yourtheme\n\n# Add components from different registries\nnpx buildy-ui@latest add button card --registry utility\nnpx buildy-ui@latest add input --registry semantic\nnpx buildy-ui@latest add dark-theme --registry yourtheme\n\n# Install all components from a registry\nnpx buildy-ui@latest add --all --registry semantic\n\n# Build and scan registries\nnpx buildy-ui@latest scan --registry utility\nnpx buildy-ui@latest build\n</code></pre>\n<h2>Semantic CSS Styles via CDN</h2>\n<p>Components installed via CLI can also use semantic styles through CDN:</p>\n<pre><code class=\"language-html\">&lt;!-- Add compiled semantic CSS styles --&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/ui8kit@latest/css/dist/styles.css&quot;&gt;\n&lt;!-- OR --&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/ui8kit@latest/css/dist/styles.css&quot;&gt;\n</code></pre>\n<p>This allows you to:</p>\n<ul>\n<li>Use CLI for component logic and structure</li>\n<li>Apply semantic styling via CDN without additional CSS bundling</li>\n<li>Mix CLI workflow with CDN styling for faster development</li>\n</ul>\n<pre><code class=\"language-jsx\">// CLI-imported component with CDN styling\nimport { Button } from &#39;@/semantic/ui/button&#39;\n\n// Component will automatically use semantic CSS classes from CDN\n&lt;Button className=&quot;button button-secondary button-lg&quot;&gt;Styled Button&lt;/Button&gt;\n</code></pre>\n<p><strong>Best Practice</strong>: Install components via CLI for development workflow, add CDN CSS link for instant semantic styling without build configuration.</p>\n<h2>CSS Integration with Tailwind for Prod</h2>\n<h3>Package Installation (Recommended for Tailwind projects)</h3>\n<p>Since semantic CSS files contain Tailwind directives (<code>@apply</code>), they must be processed during build time:</p>\n<pre><code class=\"language-bash\"># Install the CSS package\nnpm install ui8kit@latest\n# or\nyarn add ui8kit@latest\n# or\npnpm add ui8kit@latest\n# or\nbun add ui8kit@latest\n</code></pre>\n<h3>Import in your CSS/SCSS files</h3>\n<pre><code class=\"language-css\">/* Import all semantic styles */\n@import &quot;ui8kit/css/dist/semantic/index.css&quot;;\n\n/* Or import individual components */\n@import &quot;ui8kit/css/dist/semantic/button.css&quot;;\n@import &quot;ui8kit/css/dist/semantic/card.css&quot;;\n@import &quot;ui8kit/css/dist/semantic/input.css&quot;;\n</code></pre>\n<h3>Why Package Installation is Required</h3>\n<p>Semantic CSS files contain Tailwind directives that need compilation:</p>\n<pre><code class=\"language-css\">/* Example from button.css */\n.button-default {\n  @apply bg-primary text-primary-foreground shadow-xs hover:bg-primary/90;\n}\n\n.button-destructive {\n  @apply bg-destructive text-destructive-foreground shadow-xs hover:bg-destructive/90;\n}\n</code></pre>\n<h3>Package vs CDN Comparison</h3>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Use Case</th>\n<th>Tailwind Directives</th>\n<th>Build Required</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>Package</strong></td>\n<td>Production projects</td>\n<td>✅ Supported</td>\n<td>✅ Required</td>\n</tr>\n<tr>\n<td><strong>CDN</strong></td>\n<td>Quick prototyping</td>\n<td>❌ Pre-compiled only</td>\n<td>❌ Not required</td>\n</tr>\n</tbody></table>\n<h3>Integration with Tailwind Config</h3>\n<p>Add the package path to your <code>tailwind.config.js</code> for proper purging:</p>\n<pre><code class=\"language-js\">/** @type {import(&#39;tailwindcss&#39;).Config} */\nmodule.exports = {\n  content: [\n    &quot;./src/**/*.{js,ts,jsx,tsx}&quot;,\n    &quot;./node_modules/ui8kit/**/*.{js,ts,jsx,tsx}&quot;,\n  ],\n  // ... rest of your config\n}\n</code></pre>\n<p><strong>Note</strong>: For production builds, use npm package installation. CDN is only for quick prototyping with pre-compiled styles.</p>\n<h2>Multi-Registry Architecture</h2>\n<p>The CLI supports three types of registries:</p>\n<ul>\n<li><strong><code>utility</code></strong> - Base registry (required first). Contains foundational UI components</li>\n<li><strong><code>semantic</code></strong> - Semantic components that extend utility components</li>\n<li><strong><code>theme</code></strong> - Theme-specific components and variations</li>\n</ul>\n<h3>Registry Dependencies</h3>\n<ul>\n<li><strong>Utility registry</strong> is the foundation and must be initialized first</li>\n<li><strong>Semantic and yourtheme registries</strong> require utility registry to be present</li>\n<li>Components can only be installed in non-utility registries if they exist in utility first</li>\n</ul>\n<h2>Commands</h2>\n<h3>Initialize project</h3>\n<pre><code class=\"language-bash\"># Initialize utility registry (required first)\nnpx buildy-ui@latest init\n\n# Initialize additional registries\nnpx buildy-ui@latest init --registry semantic\nnpx buildy-ui@latest init --registry yourtheme\n\n# Skip prompts and use defaults\nnpx buildy-ui@latest init --yes --registry semantic\n</code></pre>\n<p>Creates registry-specific configuration, directories, and dependencies.</p>\n<h3>Add components</h3>\n<pre><code class=\"language-bash\"># Add from utility registry (default)\nnpx buildy-ui@latest add button card\n\n# Add from specific registries\nnpx buildy-ui@latest add button --registry utility\nnpx buildy-ui@latest add input --registry semantic\nnpx buildy-ui@latest add dark-theme --registry yourtheme\n\n# Add multiple components at once\nnpx buildy-ui@latest add button card hero-section --registry semantic\n\n# Add from external URL\nnpx buildy-ui@latest add &quot;https://ui.example.com/button.json&quot;\n\n# Install ALL available components from a registry\nnpx buildy-ui@latest add --all --registry utility\nnpx buildy-ui@latest add --all --registry semantic\n\n# Preview what would be installed\nnpx buildy-ui@latest add --all --dry-run --registry semantic\nnpx buildy-ui@latest add button --dry-run --registry yourtheme\n\n# Force overwrite existing files\nnpx buildy-ui@latest add button --force --registry semantic\n\n# Enable retry logic for unreliable connections\nnpx buildy-ui@latest add button --retry --registry semantic\nnpx buildy-ui@latest add --all --retry --registry yourtheme\n</code></pre>\n<p><strong>Smart Features</strong>:</p>\n<ul>\n<li><strong>Registry Validation</strong>: Ensures utility registry exists before using semantic/theme</li>\n<li><strong>Component Validation</strong>: Checks if components exist in utility before installing in other registries</li>\n<li><strong>Smart Search</strong>: Automatically searches across all categories (<code>ui</code>, <code>blocks</code>, <code>components</code>, <code>lib</code>, <code>templates</code>)</li>\n<li><strong>Dependency Intelligence</strong>: Handles workspace dependencies and filters real npm packages</li>\n<li><strong>Skip Existing</strong>: Already installed files are skipped automatically (use <code>--force</code> to overwrite)</li>\n<li><strong>Retry Mode</strong>: Use <code>--retry</code> flag for enhanced connection logic with automatic retries and timeouts</li>\n<li><strong>Graceful Fallback</strong>: Helpful error messages with alternative solutions when registry is unavailable</li>\n</ul>\n<h3>Scan existing components</h3>\n<pre><code class=\"language-bash\"># Scan utility registry\nnpx buildy-ui@latest scan --registry utility\n\n# Scan semantic registry\nnpx buildy-ui@latest scan --registry semantic --output ./semantic/registry.json\n\n# Scan with custom source directory\nnpx buildy-ui@latest scan --registry yourtheme --source ./theme --output ./theme-registry.json\n</code></pre>\n<p><strong>Scan Features</strong>:</p>\n<ul>\n<li><strong>Multi-category scanning</strong>: Scans <code>ui</code>, <code>components</code>, <code>blocks</code>, <code>templates</code>, and <code>lib</code> directories</li>\n<li><strong>Dependency analysis</strong>: Uses TypeScript AST to extract real dependencies vs devDependencies</li>\n<li><strong>Smart filtering</strong>: Excludes local aliases (<code>@/</code>, <code>./</code>, <code>~/</code>) and workspace dependencies</li>\n<li><strong>JSDoc extraction</strong>: Automatically extracts component descriptions from comments</li>\n</ul>\n<h3>Build registry (for library authors)</h3>\n<pre><code class=\"language-bash\"># Build with default settings\nnpx buildy-ui@latest build\n\n# Build specific registry\nnpx buildy-ui@latest build ./utility/registry.json --output ./packages/registry/r/utility\n\n# Build semantic registry\nnpx buildy-ui@latest build ./semantic/registry.json --output ./packages/registry/r/semantic\n\n# Build from different working directory\nnpx buildy-ui@latest build --cwd ./packages/ui --output ./packages/registry/r\n</code></pre>\n<h2>Directory Structure</h2>\n<p>After initialization, your project will have registry-specific directories:</p>\n<pre><code># Utility registry (base)\nutility/\n├── ui/              # UI components (@/ui)\n├── blocks/          # Component blocks (@/blocks)\n├── components/      # Generic components (@/components)\n├── templates/       # Template components (@/templates)\n└── buildy.config.json\n\n# Semantic registry\nsemantic/\n├── ui/              # Semantic UI components\n├── blocks/          # Semantic blocks\n├── components/      # Semantic components\n├── templates/       # Semantic templates\n└── buildy.config.json\n\n# Theme registry\ntheme/\n├── ui/              # Theme-specific UI\n├── blocks/          # Theme blocks\n├── components/      # Theme components\n├── templates/       # Theme templates\n└── buildy.config.json\n\n# Shared utilities (created with utility registry)\nlib/                 # Utilities (@/lib)\n└── utils.ts\n</code></pre>\n<p>Components are automatically installed to the correct directory based on their type and registry:</p>\n<ul>\n<li><code>registry:ui</code> → <code>{registry}/ui/</code></li>\n<li><code>registry:block</code> → <code>{registry}/blocks/</code></li>\n<li><code>registry:component</code> → <code>{registry}/components/</code></li>\n<li><code>registry:template</code> → <code>{registry}/templates/</code></li>\n<li><code>registry:lib</code> → <code>lib/</code> (always at root)</li>\n</ul>\n<h2>Component Types</h2>\n<ul>\n<li><code>registry:ui</code> - Basic UI components (buttons, inputs, etc.)</li>\n<li><code>registry:lib</code> - Utility libraries and functions (shared across registries)</li>\n<li><code>registry:block</code> - Complex component blocks</li>\n<li><code>registry:component</code> - Generic components</li>\n<li><code>registry:template</code> - Template components</li>\n</ul>\n<h2>Configuration</h2>\n<p>Each registry has its own <code>buildy.config.json</code> file:</p>\n<h3>Utility Registry Config</h3>\n<pre><code class=\"language-json\">{\n  &quot;$schema&quot;: &quot;https://buildy.tw/schema.json&quot;,\n  &quot;framework&quot;: &quot;vite-react&quot;,\n  &quot;typescript&quot;: true,\n  &quot;aliases&quot;: {\n    &quot;@&quot;: &quot;./src&quot;,\n    &quot;@/components&quot;: &quot;./utility/components&quot;,\n    &quot;@/ui&quot;: &quot;./utility/ui&quot;,\n    &quot;@/blocks&quot;: &quot;./utility/blocks&quot;,\n    &quot;@/lib&quot;: &quot;./lib&quot;,\n    &quot;@/utility&quot;: &quot;./utility&quot;,\n    &quot;@/semantic&quot;: &quot;./semantic&quot;,\n    &quot;@/theme&quot;: &quot;./theme&quot;\n  },\n  &quot;registry&quot;: &quot;@ui8kit&quot;,\n  &quot;componentsDir&quot;: &quot;./utility/ui&quot;,\n  &quot;libDir&quot;: &quot;./lib&quot;\n}\n</code></pre>\n<h3>Semantic Registry Config</h3>\n<pre><code class=\"language-json\">{\n  &quot;$schema&quot;: &quot;https://buildy.tw/schema.json&quot;,\n  &quot;framework&quot;: &quot;vite-react&quot;,\n  &quot;typescript&quot;: true,\n  &quot;aliases&quot;: {\n    &quot;@&quot;: &quot;./src&quot;,\n    &quot;@/components&quot;: &quot;./semantic/components&quot;,\n    &quot;@/ui&quot;: &quot;./semantic/ui&quot;,\n    &quot;@/blocks&quot;: &quot;./semantic/blocks&quot;,\n    &quot;@/lib&quot;: &quot;./lib&quot;,\n    &quot;@/utility&quot;: &quot;./utility&quot;,\n    &quot;@/semantic&quot;: &quot;./semantic&quot;,\n    &quot;@/theme&quot;: &quot;./theme&quot;\n  },\n  &quot;registry&quot;: &quot;@ui8kit&quot;,\n  &quot;componentsDir&quot;: &quot;./semantic/ui&quot;,\n  &quot;libDir&quot;: &quot;./lib&quot;\n}\n</code></pre>\n<h2>Registry Validation</h2>\n<p>The CLI includes intelligent validation:</p>\n<h3>Registry Dependency Validation</h3>\n<pre><code class=\"language-bash\"># This will fail if utility registry is not initialized\nnpx buildy-ui@latest init --registry semantic\n# ❌ Cannot use semantic registry without utility registry. Please run: npx buildy-ui init\n\n# This will fail if utility registry has no components\nnpx buildy-ui@latest add button --registry semantic\n# ❌ No components found in utility registry. Please install utility components first\n</code></pre>\n<h3>Component Dependency Validation</h3>\n<pre><code class=\"language-bash\"># This will show available utility components and fail\nnpx buildy-ui@latest add card --registry semantic\n\n# Output:\n# 📦 Available utility components (3 total):\n#    ui: button, input\n#    lib: utils\n# ❌ Components not found in utility registry: card. Install them first: npx buildy-ui add card\n</code></pre>\n<h2>Dependency Management</h2>\n<p>The CLI intelligently handles dependencies:</p>\n<h3>Workspace Dependencies</h3>\n<pre><code class=\"language-bash\"># Automatically detects and handles workspace dependencies\nnpx buildy-ui@latest add button --registry semantic\n\n# Output:\n# ✅ Already installed: clsx, tailwind-merge\n# 🔗 Workspace dependencies: react, react-dom\n# 📦 Will install: lucide-react\n</code></pre>\n<h3>Dependency Analysis</h3>\n<ul>\n<li><strong>Real dependencies</strong>: Actual npm packages that need installation</li>\n<li><strong>Workspace dependencies</strong>: Detected and skipped (e.g., <code>workspace:*</code>)</li>\n<li><strong>Local aliases</strong>: Filtered out (<code>@/</code>, <code>./</code>, <code>~/</code>)</li>\n<li><strong>DevDependencies</strong>: Automatically categorized (TypeScript, testing tools, etc.)</li>\n</ul>\n<h2>External Component Format</h2>\n<pre><code class=\"language-json\">{\n  &quot;$schema&quot;: &quot;https://buildy.tw/schema/registry-item.json&quot;,\n  &quot;name&quot;: &quot;button&quot;,\n  &quot;type&quot;: &quot;registry:ui&quot;,\n  &quot;description&quot;: &quot;A customizable button component&quot;,\n  &quot;dependencies&quot;: [&quot;clsx&quot;, &quot;tailwind-merge&quot;],\n  &quot;devDependencies&quot;: [&quot;@types/react&quot;],\n  &quot;files&quot;: [\n    {\n      &quot;path&quot;: &quot;button.tsx&quot;,\n      &quot;content&quot;: &quot;import React from &#39;react&#39;...&quot;,\n      &quot;target&quot;: &quot;ui&quot;\n    }\n  ]\n}\n</code></pre>\n<h2>Registry Building</h2>\n<h3>Input: registry.json</h3>\n<pre><code class=\"language-json\">{\n  &quot;$schema&quot;: &quot;https://buildy.tw/schema/registry.json&quot;,\n  &quot;items&quot;: [\n    {\n      &quot;name&quot;: &quot;button&quot;,\n      &quot;type&quot;: &quot;registry:ui&quot;,\n      &quot;description&quot;: &quot;A customizable button component&quot;,\n      &quot;dependencies&quot;: [&quot;clsx&quot;, &quot;tailwind-merge&quot;],\n      &quot;devDependencies&quot;: [&quot;@types/react&quot;],\n      &quot;files&quot;: [\n        {\n          &quot;path&quot;: &quot;./utility/ui/button.tsx&quot;,\n          &quot;target&quot;: &quot;ui&quot;\n        }\n      ]\n    }\n  ],\n  &quot;registry&quot;: &quot;utility&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;\n}\n</code></pre>\n<h3>Output: Built Registry</h3>\n<pre><code>packages/registry/r/\n├── utility/\n│   ├── index.json          # Utility registry index\n│   ├── ui/\n│   │   └── button.json     # UI components\n│   ├── lib/\n│   │   └── utils.json      # Utility libraries\n│   ├── blocks/\n│   │   └── hero.json       # Component blocks\n│   └── components/\n│       └── card.json       # Generic components\n├── semantic/\n│   ├── index.json          # Semantic registry index\n│   └── ui/\n│       └── input.json      # Semantic components\n└── yourtheme/\n    ├── index.json          # Theme registry index\n    └── ui/\n        └── dark-button.json # Theme components\n</code></pre>\n<h2>Workflow for Library Authors</h2>\n<ol>\n<li><strong>Initialize registries</strong> in your development environment</li>\n<li><strong>Develop components</strong> in registry-specific directories</li>\n<li><strong>Scan registries</strong> to generate registry.json files</li>\n<li><strong>Build registries</strong> to generate distribution files</li>\n<li><strong>Deploy</strong> the registry directories to your CDN</li>\n<li><strong>Users install</strong> with registry-specific commands</li>\n</ol>\n<h3>Example Workflow</h3>\n<pre><code class=\"language-bash\"># Development setup\nnpx buildy-ui@latest init\nnpx buildy-ui@latest init --registry semantic\nnpx buildy-ui@latest init --registry yourtheme\n\n# Develop components in utility/, semantic/, yourtheme/ directories\n\n# Generate registry files\nnpx buildy-ui@latest scan --registry utility --output ./utility/registry.json\nnpx buildy-ui@latest scan --registry semantic --output ./semantic/registry.json\nnpx buildy-ui@latest scan --registry yourtheme --output ./theme/registry.json\n\n# Build distribution\nnpx buildy-ui@latest build ./utility/registry.json --output ./packages/registry/r/utility\nnpx buildy-ui@latest build ./semantic/registry.json --output ./packages/registry/r/semantic\nnpx buildy-ui@latest build ./theme/registry.json --output ./packages/registry/r/theme\n\n# Deploy packages/registry/r/ to your CDN\n</code></pre>\n<h2>Alternative Installation Methods</h2>\n<p>If you prefer to install the CLI:</p>\n<h3>Global installation</h3>\n<pre><code class=\"language-bash\">npm install -g buildy-ui\n# Then use: buildy init, buildy add button, etc.\n</code></pre>\n<h3>Local installation</h3>\n<pre><code class=\"language-bash\">npm install -D buildy-ui\n# Then use: npx buildy init, npx buildy add button, etc.\n</code></pre>\n<h2>License</h2>\n<p>MIT</p>",
    "slug": "buildy-ui8kit-component-library-",
    "url": "/buildy-ui8kit-component-library-",
    "id": 1750586592969,
    "excerpt": "\"BuildY UI8Kit component library",
    "featuredImage": "undefined",
    "thumbnail": "undefined",
    "meta": {
      "_edit_last": "1",
      "_edit_lock": "1750614640415:1"
    },
    "categories": [],
    "date": {
      "formatted": "2025-06-22",
      "display": "22 июня 2025 г.",
      "timestamp": 1750586664796,
      "year": "2025",
      "month": "06",
      "day": "22",
      "modified": "2025-06-22",
      "modified_display": "22 июня 2025 г."
    },
    "filePath": "buildy-ui8kit-component-library-.mdx",
    "fileType": "mdx",
    "lastModified": "2025-06-22T10:04:24.796Z"
  },
  "1750614570378": {
    "title": "Go Fast CMS",
    "content": "<h1>Go Fast CMS - A Lightweight CRUD Example</h1><p><em>A lightweight </em><strong><em>Content Management System (CMS)</em></strong><em> built with Go, focusing on high performance using </em><code>fasthttp</code><em> and </em><code>quicktemplate</code><em>. </em></p><h3>CRUD</h3><p>This project serves as a practical example demonstrating full CRUD operations, JSON import/export, and a clean project structure, making it an excellent starting point for junior Go developers.</p><h2>Features</h2><ul><li><p><strong>High Performance:</strong> Built entirely in Go and leverages the blazing-fast <code>fasthttp</code> library for handling HTTP requests with minimal overhead and allocations. Aims for response times in the <strong>2-4 millisecond</strong> range for core API and page generation logic (excluding network latency).</p></li><li><p><strong>Efficient Templating:</strong> Uses <code>quicktemplate</code> (qtc) for generating HTML. Templates are precompiled into Go code, eliminating runtime template parsing bottlenecks and further boosting performance.</p></li><li><p><strong>Ephemeral Embedded Database:</strong> Utilizes <code>bbolt</code> for data storage. The database is initialized from an embedded file on startup and runs ephemerally (data persists only for the application's lifetime), making it easy to run and experiment without external database dependencies.</p></li><li><p><strong>Full CRUD API:</strong> Provides a complete JSON API for managing content items:</p><ul><li><p><code>GET /api/content</code>: List all items.</p></li><li><p><code>GET /api/content/{id}</code>: Get a specific item.</p></li><li><p><code>POST /api/content</code>: Create a new item.</p></li><li><p><code>PUT /api/content/{id}</code>: Update an existing item.</p></li><li><p><code>DELETE /api/content/{id}</code>: Delete an item.</p></li></ul></li><li><p><strong>Server-Rendered HTML:</strong> Generates HTML pages on the server using the precompiled <code>quicktemplate</code> templates for common CMS views (List, View, Create, Edit).</p></li><li><p><strong>JSON Import/Export:</strong> Includes API endpoints for easily exporting the entire content database to JSON (<code>POST /api/export</code>) and importing content from a JSON file (<code>POST /api/import</code>), replacing existing data.</p></li><li><p><strong>Minimalist Frontend:</strong> Relies on CDN-delivered assets for styling and basic interactivity:</p><ul><li><p><strong>Tailwind CSS v4 (via Browser CDN):</strong> Provides modern utility-first styling.</p></li><li><p><strong>Alpine.js (via CDN):</strong> Used for simple frontend interactions (like mobile menu toggles).</p></li><li><p><strong>Zero Server Impact:</strong> Loading these CDN assets happens entirely in the user's browser, contributing <strong>0 ms</strong> to the Go application's server response time.</p></li></ul></li><li><p><strong>Clear Project Structure:</strong> Follows standard Go practices (<code>cmd/</code>, <code>internal/</code>) with logical separation of concerns (handlers, storage, core, templates, models).</p></li></ul><h2>Technology Stack</h2><ul><li><p><strong>Language:</strong> Go (1.21+)</p></li><li><p><strong>Web Server:</strong> <code>fasthttp</code></p></li><li><p><strong>Routing:</strong> <code>fasthttp/router</code> (wrapped in <code>internal/core</code>)</p></li><li><p><strong>Templating:</strong> <code>quicktemplate</code> (qtc)</p></li><li><p><strong>Database:</strong> <code>bbolt</code> (embedded)</p></li><li><p><strong>Frontend:</strong> Tailwind CSS v4 (CDN), Alpine.js (CDN)</p></li></ul><h2>Performance</h2><p>This project prioritizes speed. By using <code>fasthttp</code>, which is designed for high-throughput scenarios with low memory allocations, and <code>quicktemplate</code>, which compiles templates to efficient Go code, the core application logic aims for response times typically between <strong>2-4 milliseconds</strong>.</p><p>The use of CDNs for Tailwind CSS and Alpine.js ensures that the Go backend is not involved in serving these assets, keeping its focus solely on fast data processing and HTML generation.</p><h2>Architecture</h2><p>The project adheres to a standard Go layout:</p><ul><li><p><code>cmd/cms/main.go</code>: Application entry point, server initialization, and routing setup.</p></li><li><p><code>internal/</code>: Contains the core application logic:</p><ul><li><p><code>config/</code>: Application configuration loading.</p></li><li><p><code>core/</code>: Request router wrapper.</p></li><li><p><code>handlers/</code>: HTTP request handlers (API, Pages, Static - <em>currently inactive</em>).</p></li><li><p><code>storage/</code>: Database interaction logic (<code>bbolt</code>).</p></li><li><p><code>templates/</code>: <code>quicktemplate</code> source files (<code>.qtpl</code>) and generated Go code.</p></li><li><p><code>models/</code>: Data structures and template view models.</p></li></ul></li><li><p><code>cmd/cms/assets/</code>: Embedded assets (database initial state, <em>inactive</em> static files).</p></li></ul><h2>Target Audience</h2><p>This project is an ideal learning resource and starting point for <strong>junior Go developers</strong> who want to:</p><ul><li><p>Understand how to build a web application in Go.</p></li><li><p>See a practical implementation of CRUD operations.</p></li><li><p>Learn about high-performance HTTP handling with <code>fasthttp</code>.</p></li><li><p>Explore efficient server-side templating with <code>quicktemplate</code>.</p></li><li><p>Grasp a standard Go project structure.</p></li><li><p>Build a functional application with API and HTML interfaces.</p></li></ul><h2>Getting Started</h2><h3>Prerequisites</h3><ul><li><p>Go (version 1.23 or later recommended)</p></li><li><p><code>quicktemplate</code> compiler (<code>qtc</code>)</p><pre><code class=\"language-bash\">go install github.com/valyala/quicktemplate/qtc@latest\n</code></pre></li></ul><h3>Running the Application Locally</h3><ol><li><p><strong>Clone the repository:</strong></p><pre><code class=\"language-bash\">git clone https://github.com/fastygo/cms.git\ncd cms\n</code></pre></li><li><p><strong>Generate Go code from templates:</strong></p><pre><code class=\"language-bash\">go generate ./...\n# or use: qtc -dir=internal/templates \n</code></pre></li><li><p><strong>(Optional) Set Authentication Variables:</strong> The application now uses basic authentication.<br>Set the following environment variables before running:</p><pre><code class=\"language-bash\"># Example for Linux/macOS/Git Bash\nexport AUTH_USER=\"your_desired_username\"\nexport AUTH_PASS=\"your_strong_password\"\nexport LOGIN_LIMIT_ATTEMPT=\"5\" # Optional: Default is 5\nexport LOGIN_LOCK_DURATION=\"1h\" # Optional: Default is 1h\n\n# Example for Windows Command Prompt\n# set AUTH_USER=your_desired_username\n# set AUTH_PASS=your_strong_password\n# set LOGIN_LIMIT_ATTEMPT=5\n# set LOGIN_LOCK_DURATION=1h\n\n# Example for PowerShell\n# $env:AUTH_USER=\"your_desired_username\"\n# $env:AUTH_PASS=\"your_strong_password\"\n# $env:LOGIN_LIMIT_ATTEMPT=\"5\"\n# $env:LOGIN_LOCK_DURATION=\"1h\"\n</code></pre><p>If these variables are not set, the application will log a warning, and authentication will effectively be disabled (or fail depending on usage).</p></li><li><p><strong>Run the application directly:</strong></p><pre><code class=\"language-bash\"># Set variables directly for the run command (Linux/macOS/Git Bash)\nAUTH_USER=\"admin\" AUTH_PASS=\"qwerty123\" LOGIN_LIMIT_ATTEMPT=\"3\" LOGIN_LOCK_DURATION=\"1m\" go run cmd/cms/main.go\n\n# Or, if variables were exported previously:\n# go run cmd/cms/main.go\n</code></pre><p><em>(Alternatively, build first: </em><code>go build -o cms ./cmd/cms</code><em> then run </em><code>./cms</code><em>)</em></p></li><li><p><strong>Access the application:</strong> Open your web browser to <code>http://localhost:8080</code></p></li><li><p><strong>Login:</strong> You will be prompted to log in. Use the credentials you set in the environment variables.</p></li><li><p><strong>DEMO Admin:</strong> Open to <code>https://crud.fastygo.app-server.ru/</code> and use <strong>Login:</strong> <code>admin</code> <strong>Pass:</strong> <code>qwerty123</code>. You're great</p></li></ol><h3>Running with Docker</h3><ol><li><p><strong>Build the Docker image:</strong></p><pre><code class=\"language-bash\">docker build -t fasty-cms .\n</code></pre></li><li><p><strong>Run the Docker container:</strong></p><pre><code class=\"language-bash\">docker run -p 8080:8080 --rm --name fasty-cms-app fasty-cms\n</code></pre><ul><li><p>You can override the default credentials and settings using <code>-e</code> flags:</p><pre><code class=\"language-bash\">docker run -p 8080:8080 --rm --name fasty-cms-app \\\n  -e AUTH_USER=\"new_admin\" \\\n  -e AUTH_PASS=\"a_very_secure_password\" \\\n  -e LOGIN_LIMIT_ATTEMPT=\"10\" \\\n  -e LOGIN_LOCK_DURATION=\"30m\" \\\n  fasty-cms\n</code></pre></li></ul></li><li><p><strong>Access the application:</strong> Open your web browser to <code>http://localhost:8080</code></p></li><li><p><strong>Login (Default Docker):</strong> If you ran the container without overriding variables, use the default credentials set in the <code>Dockerfile</code>:</p><ul><li><p><strong>Username:</strong> <code>admin</code></p></li><li><p><strong>Password:</strong> <code>qwerty123</code></p></li></ul></li></ol><h2>Authentication</h2><p>The application implements basic authentication using credentials stored in environment variables (<code>AUTH_USER</code>, <code>AUTH_PASS</code>). Access to most pages and the API requires the user to be logged in.</p><p>It also includes rate limiting for login attempts (<code>LOGIN_LIMIT_ATTEMPT</code>, default 5) with a temporary lockout period (<code>LOGIN_LOCK_DURATION</code>, default 1 hour) after exceeding the limit.</p><p><strong>Security Note:</strong> This basic authentication is suitable for development or trusted environments. For production, consider implementing more robust security measures like password hashing, HTTPS enforcement, and potentially JWT or OAuth.</p><h2>Future Improvements</h2><ul><li><p>Implement a robust static file serving solution (revisiting the <code>internal/handlers/static.go</code> logic).</p></li><li><p>Add user authentication and authorization.</p></li><li><p>Integrate a build pipeline for CSS/JS instead of relying solely on CDNs.</p></li><li><p>Introduce database migrations.</p></li><li><p>Add unit and integration tests.</p></li></ul>",
    "slug": "go-fast-cms",
    "url": "/go-fast-cms",
    "id": 1750586491574,
    "excerpt": "\"Go Fast CMS - A Lightweight CRUD Example",
    "featuredImage": "undefined",
    "thumbnail": "undefined",
    "meta": {
      "_edit_last": "1",
      "_edit_lock": "1750614640415:1"
    },
    "categories": [],
    "date": {
      "formatted": "2025-06-22",
      "display": "22 июня 2025 г.",
      "timestamp": 1750614639376,
      "year": "2025",
      "month": "06",
      "day": "22",
      "modified": "2025-06-22",
      "modified_display": "22 июня 2025 г."
    },
    "filePath": "go-fast-cms.mdx",
    "fileType": "mdx",
    "lastModified": "2025-06-22T17:50:39.376Z"
  }
}